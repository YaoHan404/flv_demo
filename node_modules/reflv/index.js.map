{"version":3,"sources":["../src/index.js"],"names":["React","Component","PropTypes","flvjs","Reflv","initFlv","$video","isSupported","flvPlayer","createPlayer","props","config","attachMediaElement","load","play","unload","detachMediaElement","className","style","Object","assign","width","propTypes","string","object","url","type","oneOf","isRequired","isLive","bool","cors","withCredentials","hasAudio","hasVideo","duration","filesize","number","segments","arrayOf","shape"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,QAAlB;;AAEA;;;;IAGqBC,K;;;;;;;;;;;;;;oLAgEnBC,O,GAAU,UAACC,MAAD,EAAY;AACpB,UAAIA,MAAJ,EAAY;AACV,YAAIH,MAAMI,WAAN,EAAJ,EAAyB;AACvB,cAAIC,YAAYL,MAAMM,YAAN,cAAwB,MAAKC,KAA7B,GAAsC,MAAKA,KAAL,CAAWC,MAAjD,CAAhB;AACAH,oBAAUI,kBAAV,CAA6BN,MAA7B;AACAE,oBAAUK,IAAV;AACAL,oBAAUM,IAAV;AACA,gBAAKN,SAAL,GAAiBA,SAAjB;AACD;AACF;AACF,K;;;;;2CAEsB;AACrB,UAAI,KAAKA,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAeO,MAAf;AACA,aAAKP,SAAL,CAAeQ,kBAAf;AACD;AACF;;;6BAEQ;AAAA,mBACsB,KAAKN,KAD3B;AAAA,UACCO,SADD,UACCA,SADD;AAAA,UACYC,KADZ,UACYA,KADZ;;AAEP,aACE;AACE,mBAAWD,SADb;AAEE,eAAOE,OAAOC,MAAP,CAAc;AACnBC,iBAAO;AADY,SAAd,EAEJH,KAFI,CAFT;AAKE,aAAK,KAAKb;AALZ,QADF;AASD;;;;EA9FgCJ,S;;AAAdG,K,CAEZkB,S,GAAY;AACjBL,aAAWf,UAAUqB,MADJ;AAEjBL,SAAOhB,UAAUsB,MAFA;AAGjB;;;AAGAC,OAAKvB,UAAUqB,MANE;AAOjB;;;AAGAG,QAAMxB,UAAUyB,KAAV,CAAgB,CAAC,KAAD,EAAQ,KAAR,CAAhB,EAAgCC,UAVrB;AAWjB;;;AAGAC,UAAQ3B,UAAU4B,IAdD;AAejB;;;AAGAC,QAAM7B,UAAU4B,IAlBC;AAmBjB;;;AAGAE,mBAAiB9B,UAAU4B,IAtBV;AAuBjB;;;AAGAG,YAAU/B,UAAU4B,IA1BH;AA2BjB;;;AAGAI,YAAUhC,UAAU4B,IA9BH;AA+BjB;;;AAGAK,YAAUjC,UAAU4B,IAlCH;AAmCjB;;;AAGAM,YAAUlC,UAAUmC,MAtCH;AAuCjB;;;AAGAC,YAAUpC,UAAUqC,OAAV,CAAkBrC,UAAUsC,KAAV,CAAgB;AAC1C;;;AAGAL,cAAUjC,UAAUmC,MAAV,CAAiBT,UAJe;AAK1C;;;AAGAQ,cAAUlC,UAAUmC,MARsB;AAS1C;;;AAGAZ,SAAKvB,UAAUqB,MAAV,CAAiBK;AAZoB,GAAhB,CAAlB,CA1CO;AAwDjB;;;AAGAjB,UAAQT,UAAUsB;AA3DD,C;eAFApB,K","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport flvjs from 'flv.js';\n\n/**\n * react component wrap flv.js\n */\nexport default class Reflv extends Component {\n\n  static propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    /**\n     * media URL, can be starts with 'https(s)' or 'ws(s)' (WebSocket)\n     */\n    url: PropTypes.string,\n    /**\n     * media type, 'flv' or 'mp4'\n     */\n    type: PropTypes.oneOf(['flv', 'mp4']).isRequired,\n    /**\n     * whether the data source is a **live stream**\n     */\n    isLive: PropTypes.bool,\n    /**\n     * whether to enable CORS for http fetching\n     */\n    cors: PropTypes.bool,\n    /**\n     * whether to do http fetching with cookies\n     */\n    withCredentials: PropTypes.bool,\n    /**\n     * whether the stream has audio track\n     */\n    hasAudio: PropTypes.bool,\n    /**\n     * whether the stream has video track\n     */\n    hasVideo: PropTypes.bool,\n    /**\n     * total media duration, in milliseconds\n     */\n    duration: PropTypes.bool,\n    /**\n     * total file size of media file, in bytes\n     */\n    filesize: PropTypes.number,\n    /**\n     * Optional field for multipart playback, see MediaSegment\n     */\n    segments: PropTypes.arrayOf(PropTypes.shape({\n      /**\n       * indicates segment duration in milliseconds\n       */\n      duration: PropTypes.number.isRequired,\n      /**\n       * indicates segment file size in bytes\n       */\n      filesize: PropTypes.number,\n      /**\n       * indicates segment file URL\n       */\n      url: PropTypes.string.isRequired,\n    })),\n    /**\n     * @see https://github.com/Bilibili/flv.js/blob/master/docs/api.md#config\n     */\n    config: PropTypes.object,\n  }\n\n  initFlv = ($video) => {\n    if ($video) {\n      if (flvjs.isSupported()) {\n        let flvPlayer = flvjs.createPlayer({ ...this.props }, this.props.config);\n        flvPlayer.attachMediaElement($video);\n        flvPlayer.load();\n        flvPlayer.play();\n        this.flvPlayer = flvPlayer;\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.flvPlayer) {\n      this.flvPlayer.unload();\n      this.flvPlayer.detachMediaElement();\n    }\n  }\n\n  render() {\n    const { className, style } = this.props;\n    return (\n      <video\n        className={className}\n        style={Object.assign({\n          width: '100%',\n        }, style)}\n        ref={this.initFlv}\n      />\n    )\n  }\n}\n"]}