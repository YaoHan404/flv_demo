import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import flvjs from 'flv.js';

/**
 * react component wrap flv.js
 */

var Reflv = function (_Component) {
  _inherits(Reflv, _Component);

  function Reflv() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Reflv);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Reflv.__proto__ || Object.getPrototypeOf(Reflv)).call.apply(_ref, [this].concat(args))), _this), _this.initFlv = function ($video) {
      if ($video) {
        if (flvjs.isSupported()) {
          var flvPlayer = flvjs.createPlayer(_extends({}, _this.props), _this.props.config);
          flvPlayer.attachMediaElement($video);
          flvPlayer.load();
          flvPlayer.play();
          _this.flvPlayer = flvPlayer;
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Reflv, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.flvPlayer) {
        this.flvPlayer.unload();
        this.flvPlayer.detachMediaElement();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          style = _props.style;

      return React.createElement('video', {
        className: className,
        style: Object.assign({
          width: '100%'
        }, style),
        ref: this.initFlv
      });
    }
  }]);

  return Reflv;
}(Component);

Reflv.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  /**
   * media URL, can be starts with 'https(s)' or 'ws(s)' (WebSocket)
   */
  url: PropTypes.string,
  /**
   * media type, 'flv' or 'mp4'
   */
  type: PropTypes.oneOf(['flv', 'mp4']).isRequired,
  /**
   * whether the data source is a **live stream**
   */
  isLive: PropTypes.bool,
  /**
   * whether to enable CORS for http fetching
   */
  cors: PropTypes.bool,
  /**
   * whether to do http fetching with cookies
   */
  withCredentials: PropTypes.bool,
  /**
   * whether the stream has audio track
   */
  hasAudio: PropTypes.bool,
  /**
   * whether the stream has video track
   */
  hasVideo: PropTypes.bool,
  /**
   * total media duration, in milliseconds
   */
  duration: PropTypes.bool,
  /**
   * total file size of media file, in bytes
   */
  filesize: PropTypes.number,
  /**
   * Optional field for multipart playback, see MediaSegment
   */
  segments: PropTypes.arrayOf(PropTypes.shape({
    /**
     * indicates segment duration in milliseconds
     */
    duration: PropTypes.number.isRequired,
    /**
     * indicates segment file size in bytes
     */
    filesize: PropTypes.number,
    /**
     * indicates segment file URL
     */
    url: PropTypes.string.isRequired
  })),
  /**
   * @see https://github.com/Bilibili/flv.js/blob/master/docs/api.md#config
   */
  config: PropTypes.object
};
export default Reflv;
//# sourceMappingURL=index.js.map